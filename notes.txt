----------- HOW TO START APP ---------------------------------------------------------------------------------

1. npm i
2. Change project name in package.json:
DEBUG=<express-generator-boilerplate>:* npm start      (should start the server at localhost:3000)            
DEBUG=<express-generator-boilerplate>:* npm run devstart (should start the server in debug mode for development) 

-----------HOW THE BOILERPLATE HAS BEEN GENERATED STEP BY STEP ----------------------------------------------

CREATING EXPRESS APP with generator, as was shown https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/skeleton_website:
Template based on my projects: snippets & movies 

npm init     (generates package.json [ set entry point to app.js!] )
    first check if express-generator is already globally installed: npm list -g --depth=0, if not then:
npm install express-generator -–g      
express --view=ejs –git                (creates dir structure, chooses view template, another popular is jade=pug)
npm install -D nodemon (nodemon automates restarting the server on change. You will still need to reload the browser to
                       refresh the page.)
npm i                  (i=install  >> installs dependencies  added in package.json by express-generator)
    add in package.json: 
        "start": "node ./bin/www",
        "devstart": "nodemon ./bin/www"
DEBUG=express-generator-boilerplate:* npm start      (should start the server at localhost:3000)            
DEBUG=express-generator-boilerplate:* npm run devstart (should start the server in debug mode for development)  ( rs - force server restart)

git init
-----------------------------------------------
Stage 2

2. npm i body-parser     (will be necessary for parsing req.body)
    add in app.js (or routers):
        var bodyParser = require("body-parser");
        app.use(bodyParser.urlencoded({ extended: 'true' })); // const requestBodyStr = JSON.stringify(req.body);

3 
 -add partials/header.ejs/footer.ejs with bootstrap 4  & jquery 3
 - add bootstrap navbar to index.ejs
4.
 -add index.js testing jQuery is loaded

3. npm i request         (a wrapper for Fetch interface to handle API requests)

4. add movies.js + movies.ejs + moviesRouter in app.js (how to use request package with OMDB api)
-----------------------------------------------
Stage 3
For mongodb:
1a) install mongodb if not already installed
1b) npm i mongoose  (mapper for mongodb)
2) Add cats.js (example use of mongoose)
3) sudo service mongod start  (starts the demon)
4) mongo    (starts the shell) or use MongoDb Compass GUI
5) > show dbs, use <db>, show collections, etc 

-----------------------------------------------
Stage 4
   Add other packages you want, eg

1. npm i eslint  eslint-config-airbnb-base eslint-plugin-import 
    and then:
    npm i eslint -D
    eslint --init (to generate .eslintrc)
      if jquery then add in .eslintrc:
      env: {
        "jquery": true
      },


4. npm i htmlhint
    and then add
.htmlhintrc : ("spec-char-escape": false for .ejs files )
{
    "tagname-lowercase": true,
    "attr-lowercase": true,
    "attr-value-double-quotes": true,
    "doctype-first": true,
    "tag-pair": true,
    "spec-char-escape": false,
    "id-unique": true,
    "src-not-empty": true,
    "attr-no-duplication": true,
    "title-require": true
}


